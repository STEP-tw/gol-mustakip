{"version":3,"sources":["_src/gameOfLife.js","_src/gameLibrary.js","_src/util.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["require","makeWorld","findAliveposition","findNeighboursPositions","extractSize","updateWorld","extractValidPosition","generateNextWorld","module","exports","nextGeneration","currGeneration","bounds","dimensions","world","topLeft","bottomRight","worldDetails","alivePosition","cartesianSquare","cartesianProduct","justifyLength","range","subtractPositions","isNotOrigin","addPositions","height","width","Array","fill","map","x","generateRow","join","currPosition","filter","delta","isValidPosition","row","column","undefined","findNeighbours","bind","position","countAliveNeighbours","list","length","decideState","cell","makeGrid","gridArray","index","_ref","push","_ref2","_ref3","nextWorld","aliveNeighboursCount","operator","operations","+","-","set1","set2","forEach","element1","element2","repeatSymbol","times","symbol","Math","max","set","position1","position2","text","spaceWidth","toString","limit","count","number","Cell","react_default","a","createElement","this","props","color","col","y","stroke","strokeWidth","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","cells","colors","i","j","src_Cell","concat","genCells","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+IAMuBA,EAAQ,IANxBC,cAELC,KADAC,0BACAD,mBACAE,gBACAC,gBACAC,yBACAC,sBAaFC,EAAOC,QAAU,CAACC,eAXK,SAASC,EAAeC,GAC7C,IAAIC,EAAaT,EAAYQ,GACzBE,EAAQb,EAAUY,GAChBE,EAA0BH,EAA1BG,QAA0BH,EAAhBI,YAChBL,EAAiBL,EAAqBK,EAAeI,EAAQ,KAE7D,IAAIE,EAAe,CAACH,MADpBA,EAAQT,EAAYS,EAAMH,GACAE,cAC1BI,EAAaH,MAAQP,EAAkBU,GACvC,IAAIC,EAAgBhB,EAAkBe,GACtC,OAAOX,EAAqBY,EAAcH,EAAQ,8BCXlCf,EAAQ,IANlBmB,oBACNC,qBACAC,kBACAC,UACAC,sBACAC,gBACAC,iBAsBIxB,EAAY,SAASY,GACzB,IAAIa,EAASb,EAAW,GACpBc,EAAQd,EAAW,GACnBC,EAAS,IAAIc,MAAMF,GAAQG,KAAK,KAEpC,OADAf,EAAQA,EAAMgB,IAAK,SAAAC,GAAC,OAAI,IAAIH,MAAMD,GAAOE,KAAK,KAAKC,IAAI,SAAAC,GAAC,OAAI,OAYxDC,EAAc,SAASlB,GAE3B,MAAO,KADPA,EAASA,EAAMgB,IAAK,SAAAC,GAAC,OAAIV,EAAcU,EAAE,GAAG,OAC3BE,KAAK,KAGlB9B,EAA0B,SAAS+B,GACvC,OAAOf,EAAgB,EAAE,EAAE,EAAE,IAC3BgB,OAAOX,GAAaM,IAAI,SAAAM,GAAK,OAAIX,EAAaW,EAAMF,MAGlDG,EAAkB,SAASvB,EAAMoB,GACrC,IAAII,EAAMJ,EAAa,GACnBK,EAASL,EAAa,GAC1B,YAAsBM,GAAd1B,EAAMwB,SAA2CE,GAAtB1B,EAAMwB,GAAKC,IAG1CE,EAAiB,SAAS3B,EAAMoB,GAGpC,OAF0B/B,EAAwB+B,GAEvBC,OAAOE,EAAgBK,KAAK,KAAK5B,IAC1DgB,IAAI,SAAAa,GAAQ,OAAI7B,EAAM6B,EAAS,IAAIA,EAAS,OAG1CC,EAAuB,SAASC,EAAKF,GACzC,OAAOF,EAAeI,EAAKF,GAAUR,OAAQ,SAAAJ,GAAC,OAAS,GAALA,IAAQe,QAQtDC,EAAc,SAASD,EAAOE,GAElC,MADY,CAAE,IAAI,IAAIA,EAAK,IAAI,IAAI,IAAI,IAAI,IAAI,KAClCF,IAcftC,EAAOC,QAAU,CAAEwC,SAxDF,SAASnC,GAExB,IADA,IAAIoC,EAAY,GACRC,EAAQ,EAAGA,EAAQrC,EAAMgC,OAASK,IACxCD,EAAUC,GAASnB,EAAYlB,EAAMqC,IAEvC,OAAOD,EAAUjB,KAAK,OAoDtBhC,YACAwC,iBACAvC,kBAvFwB,SAAAkD,GAA6B,IAAlBtC,EAAkBsC,EAAlBtC,MAAMD,EAAYuC,EAAZvC,WACrCK,EAAgB,GAChBQ,EAASb,EAAW,GACpBc,EAAQd,EAAW,GAGvB,OAFAO,EAAiBE,EAAMI,GAAQJ,EAAMK,IACnCG,IAAK,SAAAa,GAAgD,GAAnC7B,EAAM6B,EAAS,IAAIA,EAAS,KAAYzB,EAAcmC,KAAK,CAACV,EAAS,GAAGA,EAAS,OAC9FzB,GAkFP6B,cACA5C,0BACAC,YA5EkB,SAAAkD,GAAiC,IAAvBtC,EAAuBsC,EAAvBtC,YAAaD,EAAUuC,EAAVvC,QAGzC,MAAO,CAFOC,EAAY,GAAKD,EAAQ,GAAK,EAChCC,EAAY,GAAKD,EAAQ,GAAK,IA2E1CV,YAlFkB,SAASS,EAAMH,GAEjC,OADAA,EAAemB,IAAI,SAAAa,GAAcN,EAAgBvB,EAAM6B,KAAe7B,EAAM6B,EAAS,IAAIA,EAAS,IAAM,KACjG7B,GAiFPuB,kBACAO,uBACArC,kBArBwB,SAAAgD,GAExB,IAFqD,IAAnB1C,EAAmB0C,EAAnB1C,WAAWC,EAAQyC,EAARzC,MACzC0C,EAAYvD,EAAUY,GAClByB,EAAM,EAAGA,EAAMzB,EAAW,GAAIyB,IACpC,IAAI,IAAIC,EAAS,EAAGA,EAAS1B,EAAW,GAAI0B,IAAU,CACpD,IAAIS,EAAOlC,EAAMwB,GAAKC,GAClBkB,EAAuBb,EAAqB9B,EAAM,CAACwB,EAAIC,IAC3DiB,EAAUlB,GAAKC,GAAUQ,EAAYU,EAAqBT,GAG9D,OAAOQ,GAaPlD,qBAhC2B,SAASY,EAAcH,EAAQ2C,GAC1D,IAAIC,EAAa,CAACC,IAAMnC,EAAaoC,IAAMtC,GAC3C,OAAuBL,EAAcY,IAAK,SAAAjB,GAAU,OAAI8C,EAAWD,GAAU7C,EAAWE,MA+BxFiB,8BCxGF,IAAMZ,EAAmB,SAAS0C,EAAKC,GACrC,IAAI3C,EAAmB,GAMvB,OALA0C,EAAKE,QAAQ,SAACC,GACZF,EAAKC,QAAQ,SAACE,GACZ9C,EAAiBiC,KAAK,CAAEY,EAAWC,QAGhC9C,GA8BH+C,EAAe,SAASC,EAAMC,GAElC,OADAD,EAAQE,KAAKC,IAAI,EAAEH,GACZ,IAAIxC,MAAMwC,GAAOvC,KAAKwC,GAAQpC,KAAK,KAG5CzB,EAAOC,QAAU,CAACU,gBAhCM,SAASqD,GAC/B,OAAOpD,EAAiBoD,EAAIA,IAgC5BpD,mBACAK,aA9BmB,SAASgD,EAAUC,GACtC,MAAO,CAACD,EAAU,GAAGC,EAAU,GAAGD,EAAU,GAAGC,EAAU,KA8BzDnD,kBAtBwB,SAASkD,EAAUC,GAC3C,MAAO,CAACD,EAAU,GAAGC,EAAU,GAAGD,EAAU,GAAGC,EAAU,KAsBzDrD,cAfoB,SAASsD,EAAMhD,GACnC,IAAIiD,EAAajD,EAAQgD,EAAKE,WAAW/B,OACzC,OAAO6B,EAAOR,EAAaS,EAAW,MActCT,eACA7C,MA9BY,SAASwD,GACrB,IAAIC,EAAQ,EACZ,OAAO,IAAInD,MAAMkD,GAAOjD,KAAK,KAAKC,IAAI,SAAAkD,GAAM,OAAID,OA6BhDvD,YAtBkB,SAASmB,GAC3B,QAAwB,GAAfA,EAAS,IAA0B,GAAfA,EAAS,0HCdzBsC,mLAVX,OAAOC,EAAAC,EAAAC,cAAA,QAAMzD,MAAM,KACnBD,OAAO,KACPG,KAAMwD,KAAKC,MAAMC,OAAS,QAC1BxD,EAAkB,GAAfsD,KAAKC,MAAME,IACdC,EAAkB,GAAfJ,KAAKC,MAAMhD,IACdoD,OAAO,YACPC,YAAa,WAREC,aCAZlF,EAAkBV,EAAQ,IAA1BU,eAiDQmF,cA1Bb,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAQ,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAd,KAAMC,KACDc,MAAQ,CAACC,IAAKP,EAAKR,MAAMe,KAFbP,mFAIC,IAAAQ,EAAAjB,KAClBA,KAAKkB,QAAUC,YAAY,kBAAIF,EAAKG,QAAO,oCAG3CpB,KAAKqB,SAAS,SAACN,EAAMd,GAEnB,MAAO,CAACe,IADK3F,EAAe0F,EAAMC,IAAI,CAACtF,QAAQ,CAAC,EAAE,GAAGC,YAAY,CAAC,GAAG,0CAKvE,IACI2F,EAlCS,SAACC,GAEhB,IADA,IAAID,EAAQ,GACJE,EAAE,EAAEA,EAAE,GAAGA,IACf,IAAI,IAAIC,EAAE,EAAEA,EAAE,GAAGA,IACfH,EAAMtD,KAAK6B,EAAAC,EAAAC,cAAC2B,EAAD,CAAMzE,IAAKuE,EAAGrB,IAAKsB,EAAGvB,MAAOqB,EAAM,GAAAI,OAAIH,EAAJ,KAAAG,OAASF,OAG3D,OAAOH,EA2BKM,CAxBO,SAACN,GACpB,IAAIC,EAAO,GAIX,OAHAD,EAAM3C,QAAQ,SAAAhB,GAdF,IAACmC,EAeXyB,GAfWzB,EAeEnC,EAfImC,EAAElD,KAAK,OAeJ,UAEf2E,EAkBMM,CAAe7B,KAAKe,MAAMC,MAErC,OACEnB,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAAA,OAAKzD,MAAO,IAAKD,OAAQ,KACtBiF,WApBOf,aCZEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DC4CNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,CAAKtB,IAxDR,CAAE,CAAE,EAAG,GACpuB,SAASC,eAAe,SDmEvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.05d4bd77.chunk.js","sourcesContent":["const {makeWorld ,\n  findNeighboursPositions,\n  findAliveposition,\n  extractSize,\n  updateWorld,\n  extractValidPosition,\n  generateNextWorld} = require(\"./gameLibrary.js\");\n\nconst nextGeneration = function(currGeneration,bounds) {\n  let dimensions = extractSize(bounds);\n  let world = makeWorld(dimensions);\n  let { topLeft , bottomRight } = bounds;\n  currGeneration = extractValidPosition(currGeneration,topLeft,\"-\");\n  world = updateWorld(world,currGeneration);\n  let worldDetails = {world,dimensions};\n  worldDetails.world = generateNextWorld(worldDetails);\n  let alivePosition = findAliveposition(worldDetails);\n  return extractValidPosition(alivePosition,topLeft,\"+\");\n}\nmodule.exports = {nextGeneration};\n","const { cartesianSquare, \n  cartesianProduct,\n  justifyLength,\n  range,\n  subtractPositions,\n  isNotOrigin, \n  addPositions} = require(\"./util.js\");\n\nconst findAliveposition = function({ world,dimensions}){\n  let alivePosition = [];\n  let height = dimensions[0];\n  let width = dimensions[1];\n  cartesianProduct(range(height),range(width)).\n    map( position => {world[position[0]][position[1]] == 1 && alivePosition.push([position[0],position[1]])});\n  return alivePosition;\n}\n\nconst updateWorld = function(world,currGeneration) {\n  currGeneration.map(position => {(isValidPosition(world,position)) && (world[position[0]][position[1]] = 1)});\n  return world;\n}\n\nconst extractSize = function({bottomRight, topLeft}) {\n  let height =  bottomRight[0] - topLeft[0] + 1 ;\n  let width = bottomRight[1] - topLeft[1] + 1;\n  return [height,width];\n}\n\nconst makeWorld = function(dimensions){\n  let height = dimensions[0];\n  let width = dimensions[1];\n  let world  = new Array(height).fill(\"1\");\n  world = world.map( x => new Array(width).fill(\"*\").map(x => 0));\n  return world;\n}\n\nconst makeGrid = function(world){\n  let gridArray = [];\n  for(let index = 0; index < world.length ; index++){\n    gridArray[index] = generateRow(world[index]);\n  }\n  return gridArray.join(\"\\n\") ;\n}\n\nconst generateRow = function(world){\n  world =  world.map( x => justifyLength(x,3)+\"|\");\n  return \"|\"+world.join(\"\");\n}\n\nconst findNeighboursPositions = function(currPosition){\n  return cartesianSquare([-1,0,1]).\n    filter(isNotOrigin).map(delta => addPositions(delta,currPosition));\n}\n\nconst isValidPosition = function(world,currPosition){\n  let row = currPosition[0];\n  let column = currPosition[1];\n  return (world[row] != undefined && world[row][column] != undefined)\n}\n\nconst findNeighbours = function(world,currPosition){ \n  let neighboursPositions = findNeighboursPositions(currPosition);\n  let neighbours = [];\n  return neighboursPositions.filter(isValidPosition.bind(null,world)).\n    map(position => world[position[0]][position[1]]);\n}\n\nconst countAliveNeighbours = function(list,position){\n  return findNeighbours(list,position).filter( x => x == 1).length;\n}\n\nconst extractValidPosition = function(alivePosition,topLeft,operator){\n  let operations = {\"+\" : addPositions,\"-\" : subtractPositions};\n  return alivePosition = alivePosition.map( dimensions => operations[operator](dimensions,topLeft));\n}\n\nconst decideState = function(length,cell){\n  let rules = [ '0','0',cell,'1','0','0','0','0','0' ];\n  return rules[length];\n}\n\nconst generateNextWorld = function({dimensions,world}) {\n  let nextWorld = makeWorld(dimensions);\n  for(let row = 0; row < dimensions[0]; row++) {\n    for(let column = 0; column < dimensions[1]; column++) {\n      let cell = world[row][column];\n      let aliveNeighboursCount = countAliveNeighbours(world,[row,column]);\n      nextWorld[row][column] = decideState(aliveNeighboursCount,cell);\n    }\n  }\n  return nextWorld; }\n\nmodule.exports = { makeGrid ,\n  makeWorld ,\n  findNeighbours,\n  findAliveposition,\n  decideState,\n  findNeighboursPositions,\n  extractSize,\n  updateWorld,\n  isValidPosition,\n  countAliveNeighbours,\n  generateNextWorld,\n  extractValidPosition,\n  generateRow};\n\n","const cartesianProduct = function(set1,set2){\n  let cartesianProduct = [];\n  set1.forEach((element1) => {\n    set2.forEach((element2) => {\n      cartesianProduct.push([ element1 , element2]);\n    });\n  });\n  return cartesianProduct;\n}\n\nconst cartesianSquare = function(set){\n  return cartesianProduct(set,set);\n}\n\nconst addPositions = function(position1,position2){\n  return [position1[0]+position2[0],position1[1]+position2[1]];\n}\n\nconst range = function(limit){\n  let count = 0;\n  return new Array(limit).fill(\"*\").map(number => count++);\n}\n\nconst subtractPositions = function(position1,position2){\n  return [position1[0]-position2[0],position1[1]-position2[1]];\n}\n\nconst isNotOrigin = function(position) {\n  return !(position[0] == 0 && position[1] == 0);\n}\n\nconst justifyLength = function(text, width) {\n  let spaceWidth = width - text.toString().length;\n  return text + repeatSymbol(spaceWidth,\" \");\n\n}\n\nconst repeatSymbol = function(times,symbol){\n  times = Math.max(0,times);\n  return new Array(times).fill(symbol).join('');\n}\n\nmodule.exports = {cartesianSquare,\n  cartesianProduct,\n  addPositions,\n  subtractPositions,\n  justifyLength,\n  repeatSymbol,\n  range,\n  isNotOrigin };\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}